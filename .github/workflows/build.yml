name: 🚀 Cross-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_NAME: "Image Search Desktop"
  APP_VERSION: "11.5.0"

jobs:
  # Windows 빌드
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 60
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Install NPM Dependencies
      run: |
        npm install
        npm list @tauri-apps/cli

    - name: 🏗️ Build Frontend
      run: |
        npm run build
        Write-Host "Checking dist folder..."
        Get-ChildItem -Path dist

    - name: 📝 Copy HTML files to dist
      shell: powershell
      run: |
        Write-Host "Copying HTML files to dist..."
        Copy-Item -Path index.html -Destination dist/ -Force
        Copy-Item -Path console.html -Destination dist/ -Force -ErrorAction SilentlyContinue
        Write-Host "Files in dist:"
        Get-ChildItem -Path dist

    - name: 🚀 Build Tauri App (Method 1)
      id: tauri_build_1
      continue-on-error: true
      run: |
        npm run tauri build
      env:
        TAURI_PRIVATE_KEY: ""
        TAURI_KEY_PASSWORD: ""

    - name: 🚀 Build Tauri App (Method 2 - if Method 1 fails)
      if: steps.tauri_build_1.outcome == 'failure'
      run: |
        npx tauri build
      env:
        TAURI_PRIVATE_KEY: ""
        TAURI_KEY_PASSWORD: ""

    - name: 📁 List Build Output
      if: always()
      shell: powershell
      run: |
        Write-Host "=== Checking all possible build locations ==="
        
        Write-Host "`n1. src-tauri/target/release/bundle:"
        if (Test-Path "src-tauri/target/release/bundle") {
          Get-ChildItem -Path "src-tauri/target/release/bundle" -Recurse | Where-Object { $_.Extension -in @('.msi', '.exe') } | Select-Object FullName
        } else {
          Write-Host "  Directory not found"
        }
        
        Write-Host "`n2. src-tauri/target/release:"
        if (Test-Path "src-tauri/target/release") {
          Get-ChildItem -Path "src-tauri/target/release" -Filter "*.exe" | Select-Object FullName
        }
        
        Write-Host "`n3. All .msi files in project:"
        Get-ChildItem -Path . -Recurse -Filter "*.msi" -ErrorAction SilentlyContinue | Select-Object FullName

    - name: 📤 Upload Windows Installer
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-installer
        path: |
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/bundle/nsis/*.exe
          src-tauri/target/release/*.exe
        retention-days: 30
        if-no-files-found: warn

  # macOS 빌드
  build-macos:
    runs-on: macos-latest
    timeout-minutes: 60
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-darwin,x86_64-apple-darwin

    - name: 📦 Install NPM Dependencies
      run: |
        npm install
        npm list @tauri-apps/cli

    - name: 🏗️ Build Frontend
      run: |
        npm run build
        echo "Checking dist folder..."
        ls -la dist/

    - name: 📝 Copy HTML files to dist
      run: |
        echo "Copying HTML files to dist..."
        cp index.html dist/ || true
        cp console.html dist/ || true
        echo "Files in dist:"
        ls -la dist/

    - name: 🚀 Build Tauri App (Universal)
      run: |
        npm run tauri build -- --target universal-apple-darwin
      env:
        TAURI_PRIVATE_KEY: ""
        TAURI_KEY_PASSWORD: ""
      continue-on-error: true

    - name: 🚀 Build Tauri App (x64 fallback)
      if: failure()
      run: |
        npm run tauri build
      env:
        TAURI_PRIVATE_KEY: ""
        TAURI_KEY_PASSWORD: ""

    - name: 📁 List Build Output
      if: always()
      run: |
        echo "=== Checking build output ==="
        find src-tauri/target -name "*.dmg" -o -name "*.app" 2>/dev/null || true

    - name: 📤 Upload macOS DMG
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: macos-dmg
        path: |
          src-tauri/target/release/bundle/dmg/*.dmg
          src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
          src-tauri/target/release/bundle/macos/*.app
        retention-days: 30
        if-no-files-found: warn

  # Linux 빌드
  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 🛠️ Install Linux Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          patchelf

    - name: 📦 Install NPM Dependencies
      run: |
        npm install
        npm list @tauri-apps/cli

    - name: 🏗️ Build Frontend
      run: |
        npm run build
        echo "Checking dist folder..."
        ls -la dist/

    - name: 📝 Copy HTML files to dist
      run: |
        echo "Copying HTML files to dist..."
        cp index.html dist/ || true
        cp console.html dist/ || true
        echo "Files in dist:"
        ls -la dist/

    - name: 🚀 Build Tauri App
      run: |
        npm run tauri build
      env:
        TAURI_PRIVATE_KEY: ""
        TAURI_KEY_PASSWORD: ""

    - name: 📁 List Build Output
      if: always()
      run: |
        echo "=== Checking build output ==="
        find src-tauri/target/release/bundle -type f 2>/dev/null || true

    - name: 📤 Upload Linux Packages
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: linux-packages
        path: |
          src-tauri/target/release/bundle/deb/*.deb
          src-tauri/target/release/bundle/appimage/*.AppImage
          src-tauri/target/release/bundle/rpm/*.rpm
        retention-days: 30
        if-no-files-found: warn

  # 릴리즈 생성
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: 📁 List Downloaded Files
      run: |
        echo "Downloaded artifacts:"
        find artifacts -type f \( -name "*.msi" -o -name "*.dmg" -o -name "*.deb" -o -name "*.AppImage" -o -name "*.exe" \) 2>/dev/null || echo "No artifacts found"

    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        tag_name: v${{ env.APP_VERSION }}-build${{ github.run_number }}
        name: "🚀 ${{ env.APP_NAME }} v${{ env.APP_VERSION }} - Build ${{ github.run_number }}"
        body: |
          ## 🔍 Image Search Desktop v11.5 - Diagnostic Release
          
          **Version:** ${{ env.APP_VERSION }}  
          **Build:** ${{ github.run_number }}  
          **Commit:** ${{ github.sha }}
          
          ### 🔍 v11.5 Diagnostic Features
          - 📊 Diagnostic console page for debugging
          - 🔧 Developer tools enabled
          - 🐛 100% similarity bug investigation
          - 💾 Memory leak fixes
          - 🎯 Detailed logging
          
          ### 🆕 How to Diagnose
          1. **Method 1**: Index Mode → "Diagnostic Console" button
          2. **Method 2**: Right-click → Console → `fashionApp.showDiagnostics()`
          3. **Method 3**: Ctrl+Shift+I for developer tools
          
          ### ⚠️ Important
          - **Clear DB and re-index after installing**
          - Check if similarity shows 99.9% (bug) or 40-80% (normal)
          
          ### 📥 Downloads
          - **Windows**: `.msi` installer
          - **macOS**: `.dmg` installer
          - **Linux**: `.deb` or `.AppImage`
        files: |
          artifacts/**/*.msi
          artifacts/**/*.exe
          artifacts/**/*.dmg
          artifacts/**/*.deb
          artifacts/**/*.AppImage
          artifacts/**/*.rpm
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
