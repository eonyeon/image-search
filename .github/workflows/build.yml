name: 🚀 Cross-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_NAME: "Image Search Desktop"
  APP_VERSION: "11.1.0"

jobs:
  # Windows 빌드
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 60
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Install NPM Dependencies
      run: |
        npm install
        npm list @tauri-apps/cli

    - name: 🏗️ Build Frontend
      run: |
        npm run build
        dir dist

    - name: 🚀 Build Tauri App
      run: |
        npm run tauri:build -- --verbose
      env:
        TAURI_PRIVATE_KEY: ""
        TAURI_KEY_PASSWORD: ""

    - name: 📁 List Build Output
      if: always()
      shell: powershell
      run: |
        Write-Host "Checking build output..."
        if (Test-Path "src-tauri/target/release/bundle") {
          Get-ChildItem -Path "src-tauri/target/release/bundle" -Recurse | Select-Object FullName
        }

    - name: 📤 Upload Windows Installer
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-installer
        path: |
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/bundle/nsis/*.exe
          src-tauri/target/release/*.exe
        retention-days: 30
        if-no-files-found: warn

  # macOS 빌드
  build-macos:
    runs-on: macos-latest
    timeout-minutes: 60
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-darwin,x86_64-apple-darwin

    - name: 📦 Install NPM Dependencies
      run: |
        npm install
        npm list @tauri-apps/cli

    - name: 🏗️ Build Frontend
      run: |
        npm run build
        ls -la dist/

    - name: 🚀 Build Tauri App (Universal)
      run: |
        npm run tauri:build -- --target universal-apple-darwin --verbose
      env:
        TAURI_PRIVATE_KEY: ""
        TAURI_KEY_PASSWORD: ""

    - name: 📁 List Build Output
      if: always()
      run: |
        echo "Checking build output..."
        if [ -d "src-tauri/target/release/bundle" ]; then
          find src-tauri/target/release/bundle -type f -name "*.dmg" -o -name "*.app"
        fi
        if [ -d "src-tauri/target/universal-apple-darwin/release/bundle" ]; then
          find src-tauri/target/universal-apple-darwin/release/bundle -type f
        fi

    - name: 📤 Upload macOS DMG
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: macos-dmg
        path: |
          src-tauri/target/release/bundle/dmg/*.dmg
          src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
          src-tauri/target/release/bundle/macos/*.app
        retention-days: 30
        if-no-files-found: warn

  # Linux 빌드
  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 🛠️ Install Linux Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          patchelf

    - name: 📦 Install NPM Dependencies
      run: |
        npm install
        npm list @tauri-apps/cli

    - name: 🏗️ Build Frontend
      run: |
        npm run build
        ls -la dist/

    - name: 🚀 Build Tauri App
      run: |
        npm run tauri:build -- --verbose
      env:
        TAURI_PRIVATE_KEY: ""
        TAURI_KEY_PASSWORD: ""

    - name: 📁 List Build Output
      if: always()
      run: |
        echo "Checking build output..."
        if [ -d "src-tauri/target/release/bundle" ]; then
          find src-tauri/target/release/bundle -type f
        fi

    - name: 📤 Upload Linux Packages
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: linux-packages
        path: |
          src-tauri/target/release/bundle/deb/*.deb
          src-tauri/target/release/bundle/appimage/*.AppImage
          src-tauri/target/release/bundle/rpm/*.rpm
        retention-days: 30
        if-no-files-found: warn

  # 릴리즈 생성
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success()
    
    steps:
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: 📁 List Downloaded Files
      run: |
        echo "Downloaded artifacts:"
        find artifacts -type f -name "*.msi" -o -name "*.dmg" -o -name "*.deb" -o -name "*.AppImage" -o -name "*.exe"

    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.APP_VERSION }}-build${{ github.run_number }}
        name: "🚀 ${{ env.APP_NAME }} v${{ env.APP_VERSION }} - Build ${{ github.run_number }}"
        body: |
          ## 🔍 Image Search Desktop Release - v11.1
          
          **Version:** ${{ env.APP_VERSION }}  
          **Build:** ${{ github.run_number }}  
          **Commit:** ${{ github.sha }}
          
          ### ✨ v11.1 Features - Enhanced Product Recognition
          - 🎯 85-88% search accuracy (from 30%)
          - 📦 Product-aware search with ID grouping
          - 🔍 Debug mode for troubleshooting
          - ⚡ WebGL GPU acceleration
          - 🖼️ MobileNetV2 deep learning model
          - 💾 Local storage with LocalForage
          
          ### 📥 Downloads
          - **Windows**: `.msi` installer (Windows 10/11)
          - **macOS**: `.dmg` installer (macOS 11+, Universal)
          - **Linux**: `.deb` package or `.AppImage`
          
          ### 🔧 Installation
          - **Windows**: Double-click the MSI file
          - **macOS**: Open DMG and drag to Applications
          - **Linux**: 
            - Debian/Ubuntu: `sudo dpkg -i *.deb`
            - AppImage: `chmod +x *.AppImage && ./AppImage`
          
          ### 💡 First Run
          1. Click "Select Folder" to index your images
          2. Upload an image to search
          3. Click "Search Similar Images"
          
          ### 🐛 Known Issues
          - Windows Defender may show a warning (unsigned app)
          - First model load requires internet connection (~16MB)
        files: |
          artifacts/**/*.msi
          artifacts/**/*.exe
          artifacts/**/*.dmg
          artifacts/**/*.deb
          artifacts/**/*.AppImage
          artifacts/**/*.rpm
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
